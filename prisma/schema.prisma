// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// data id user ngambil dari sistem onic
model Rating {
  u_id                Int           @id
  total_rating        Int?
  total_task          Int?
}

model Role {
  u_id                Int           @id
  role                String?
}

model m_user {
  u_id                 Int             @id @default(autoincrement())
  u_name               String
  division             Division?        @relation(fields: [division_id], references: [id])
  branch               Branch?          @relation(fields: [branch_id], references: [id])
  position             Position?        @relation(fields: [position_id], references: [id])
  gender               String?
  division_id          Int?
  branch_id            Int?
  position_id          Int?
  // tasks_as_pic         task[]          @relation("pic")
  // tasks_as_spv         task[]          @relation("spv")
  // uploadHistory        uploadHistory[]
  u_email              String          @unique
  u_password           String?
  title                String?
  u_rate               Int?            @default(0)
  total_task           Int?            @default(0)
  lastSeenNotification DateTime?
  deleted              Boolean         @default(false)
  created_at           DateTime?       @default(now())
  updated_at           DateTime?       @updatedAt
}

model Superior {
  id         Int     @id @default(autoincrement())
  u_name               String?
}

model Position {  
  id         Int     @id @default(autoincrement())
  p_name     String?
  branch     Branch   @relation(fields: [branch_id], references: [id])
  branch_id  Int
  // tasks      task[]
  users      m_user[]
}

model Branch {
  id          Int       @id @default(autoincrement())
  b_name      String?
  divisions   Division[] 
  // tasks       task[]
  users       m_user[]
  position    Position[]
}

model Division {
  id          Int      @id @default(autoincrement())
  branch      Branch   @relation(fields: [branch_id], references: [id])
  branch_id   Int      
  d_name      String?
  // tasks       task[]
  users       m_user[]
}

model task {
  id           Int            @id @default(autoincrement())
  pic          String?        
  spv          String?        
  pic_role     String?
  overdue      Boolean?       @default(false)

  // branch       Branch?        @relation(fields: [branch_id], references: [id])
  // division     Division?      @relation(fields: [division_id], references: [id])
  // position     Position?      @relation(fields: [position_id], references: [id])
  task_type    String?
  task_title   String?
  priority     String?
  iteration    String?
  start_date   DateTime?
  due_date     DateTime?
  description  String?        @db.Text
  approved_at  DateTime?
  approved_by  String?
  started_at   DateTime?
  started_by   String?
  finished_at  DateTime?
  finished_by  String?
  status       String?        @default("Wait-app")
  progress     Int?           @default(0)
  fileName     String?
  file_hasil   String?
  created_at   DateTime?      @default(now())
  created_by   String?
  updated_at   DateTime?      @updatedAt
  deleted_at   DateTime?
  notifications Notification[] 

  pic_rating  Int?             @default(0)
  pic_id    Int?
  spv_id    Int?
  branch    Int?
  division  Int?
  position  Int?
}



model Notification {
  id         Int       @id @default(autoincrement())
  timeStamp  String
  message    String
  task       task      @relation(fields: [taskId], references: [id])
  taskId     Int
  created_at DateTime? @default(now())
}

model uploadHistory {
  id         Int      @id @default(autoincrement())
  fileName   String?
  filePath   String?
  u_name     String?
  title      String?
  userId     Int?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}

